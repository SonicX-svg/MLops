# -*- coding: utf-8 -*-
"""Untitled19.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1h5RPojUkekE5_jXtO_vCpAUCr9-QUuI9

# load_breast_cancer - набор данных о гистологических параметрах опухолей молочной железы. Классификация.
"""

from sklearn import datasets
import pandas as pd
import numpy as np

data = datasets.load_breast_cancer() # объект Bunch, который в свою очередь, представляет собой подкласс питоновского словаря
type(data)

data.DESCR

df = pd.DataFrame(data.data, columns=data.feature_names)

df['target'] = data.target

"""Изучим тип переменных

## Изучим тип переменных
"""

df.info() # видим, что все признаки колличественныеcancer_df.isnull().sum()cancer_df.isnull().sum()

df.describe().round(2) #видим разные масштабы данных

df.isnull().sum() # пропусков нет

df.nunique() # теперь точно видим, что ккатегориальная только целевая

df_data = pd.DataFrame(data.data, columns=data.feature_names)
# импортируем необходимый класс из модуля preprocessing библиотеки sklearn
from sklearn.preprocessing import StandardScaler

# создадим объект этого класса
scaler = StandardScaler()

# приведем данные к единому масштабу
scaled_data = scaler.fit_transform(df_data)

# преобразуем scaled_data обратно в датафрейм
cancer_df_scaled = pd.DataFrame(scaled_data, columns = data.feature_names)

# вновь добавим целевую переменную
cancer_df_scaled['target'] = data.target

# посмотрим на результат (только два первых значения)
cancer_df_scaled.head(2)

# сгруппируем данные по целевой переменной, рассчитаем среднее и перевернем (транспонируем) наш датафрейм
# все это последовательно делается с помощью group_by, mean() и .T
data = cancer_df_scaled.groupby('target').mean().T
data['diff'] = abs(data.iloc[:, 0] - data.iloc[:, 1])

# остается отсортировать наш датафрейм по столбцу разницы средних в нисходящем порядке
data = data.sort_values(by = ['diff'], ascending = False)

import matplotlib.pyplot as plt
# задаем количество интервалов
bins = 17

# и размер графика
plt.figure(figsize = (10,6))

# из датафрейма cancer_df_scaled выберем столбец 'worst concave points'
# и только те строки, где target == 0 (злокачественная)
plt.hist(cancer_df_scaled.loc[cancer_df_scaled['target'] == 0, 'worst concave points'], bins, alpha = 0.5, label = 'Злокачественная')

# то же самое, но target == 1 (доброкачественная)
plt.hist(cancer_df_scaled.loc[cancer_df_scaled['target'] == 1, 'worst concave points'], bins, alpha = 0.5, label = 'Доброкачественная')
plt.legend(loc = 'upper right')

# добавим подписи и размер шрифта
plt.xlabel('worst concave points', fontsize = 16)
plt.ylabel('Количество наблюдений', fontsize = 16)
plt.title('Распределение worst concave points для двух типов опухолей', fontsize = 16)

features = list(data.index[:10])
X = cancer_df_scaled[features]
y = list(cancer_df_scaled['target'])
#df = X
#df['target'] = y

new_df = X.assign(target=y) 
new_df 

from sklearn.model_selection import train_test_split
train, test = train_test_split(new_df, test_size= 0.2 , random_state= 0 )

train.to_csv('train.csv', index=False)
test.to_csv('test.csv', index=False)
